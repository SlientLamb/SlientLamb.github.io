<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://slientlamb.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Jun 2024 03:56:55 +0000</lastBuildDate><atom:link href="https://slientlamb.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Q&amp;A 关于$DCC2$ ——Windows中使用的HMAC算法</title>
      <link>https://slientlamb.github.io/post/172402171/</link>
      <pubDate>Wed, 05 Jun 2024 03:56:55 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/172402171/</guid>
      <description>Domain Cached Credentials 2 (DCC2), MS Cache 2 Q1：NTLM和$DCC2$的关系 NTLM哈希和$DCC2$哈希可以被视为Windows系统中用于保护密码凭据的不同加密算法,它们反映了算法从低强度向高强度不断发展和迭代更新的过程。1) NTLM (NT LAN Manager)最初出现在Windows NT 3.1中,使用较为陈旧的MD4和DES算法,存在一些已知的安全缺陷,相对较不安全。2) 后来Windows引入了NTLMv2算法,使用了HMAC-MD5代替DES,以及其他改进,提高了安全性,但仍有不足。3) $DCC2$哈希则是Windows在Vista及更高版本中采用的新一代密码保护算法。它使用HMAC-SHA256、盐值、大量迭代等现代密码学技术,安全强度大幅提升。4) $DCC2$可以看作是对NTLM算法的全面升级和代替,以应对不断增强的攻击能力,提供更可靠的密码保护。 Q2：$DCC2$算法是否可以用于哈希传递攻击 $DCC2$哈希值无法实现哈希传递攻击
哈希传递攻击(Pass-the-Hash)是一种通过重用已获取的NTLM哈希值在域环境中横向移动和持久控制的攻击技术。但$DCC2$哈希设计初衷就是为了防范这种攻击。
具体来说,使用$DCC2$哈希无法实现哈希传递攻击的原因如下:1) $DCC2$并非用于Windows认证协议,无法像NTLM哈希那样直接用于通过Challenge/Response的认证过程。2) $DCC2$哈希中包含了随机的盐值,导致相同密码的哈希值都不同,无法跨系统重用。3) $DCC2$哈希仅用于加密存储凭据等机密数据,无法用作模拟用户上下文的凭证。4) 即使获取了$DCC2$哈希,也无法直接反推出原始明文密码,因此无法基于此创建有效票据。5) Windows认证机制已针对哈希传递攻击做了防护,需要通过更高权限代码注入内存的方式获取明文凭据。所以,与老式NTLM哈希不同,$DCC2$哈希设计时已考虑防范哈希传递攻击的能力,通过加入盐值、仅存储等多种措施使其无法被重用或离线破解。这大大增强了密码保护的能力。</description>
    </item>
    
    <item>
      <title>Burp Lab Note:Lab: Source code disclosure via backup files</title>
      <link>https://slientlamb.github.io/post/66828527/</link>
      <pubDate>Thu, 30 May 2024 09:52:05 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/66828527/</guid>
      <description>This lab leaks its source code via backup files in a hidden directory. To solve the lab, identify and submit the database password, which is hard-coded in the leaked source code.
这个实验室通过隐藏目录中的备份文件泄露它的源代码。解决实验室，识别并提交数据库密码，这是硬编码在泄露的源代码。
Lab: Source code disclosure via backup files | Web Security Academy 使用Burp-target-content discovery扫描站点 只扫描出以下几种类型文件
HTML 超文本标记 SVG/PNG/JPEG 图片 css 样式堆叠表 js 脚本 XML 可扩展标记语言：一种用于标记电子文件使其具有结构性的标记语言 text 文件夹 之后按照加~ 或改后缀名方式 没有找出
Files for web crawlers /robots.txtand /sitemap.xml Many websites provide files at /robots.</description>
    </item>
    
    <item>
      <title>Q&amp;A  博客的工作流  Hugo Git</title>
      <link>https://slientlamb.github.io/post/97216040/</link>
      <pubDate>Sat, 23 Mar 2024 09:10:27 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/97216040/</guid>
      <description>
博客工作流 目前常使用的写作发布模式如下： 语雀编辑器 使用语雀作为编辑和文档管理的优点太多了，让我选择它的更多是目前对我的使用来说没有明显的短板，它作为一款编辑器是足够称职的。 同步到本地 语雀自带导出md文件功能，结合hugo以md文件为基础，构造渲染网页照理来说就够了。问题出现在语雀导出的md文件，图片链接都是指向语雀的，会导致hugo依据md生成的html无法渲染图片。所以要解决的问题是：
下载图片到本地，并且根据图片存储位置，修改md文件中相应的链接。 参考以下项目实现：https://github.com/labulakalia/yuque_sync 原理是调用语雀API，实现上面需要解决的问题之后在站点根目录运行语雀，生成页面：hugo --theme=XXXX --baseUrl=&amp;quot;http://XXXX.github.io/&amp;quot; Git进行版本控制并提交到Pages hugo会把生成的网页放到public目录下
$ git add -A $ git commit -m &amp;#34;commit&amp;#34; $ git push -u origin master </description>
    </item>
    
    <item>
      <title>Q&amp;A PHP中，回调函数和Hook</title>
      <link>https://slientlamb.github.io/post/162742343/</link>
      <pubDate>Thu, 21 Mar 2024 12:46:32 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/162742343/</guid>
      <description>在PHP中，**回调函数（callback function）**是指可以作为参数传递给其他函数的函数。在PHP中，您可以将一个函数的名称作为字符串传递，或者使用一个数组，其中第一个元素是对象，第二个元素是方法名。回调函数通常用于事件处理、异步操作、排序等场景，通过回调函数可以灵活地实现不同的功能逻辑。 在PHP中，&amp;ldquo;hook&amp;quot;通常指的是钩子（hook），它是一种编程技术，允许开发者在不修改原始代码的情况下，通过在特定的位置插入自定义代码来扩展或修改程序的行为。通过使用钩子，您可以在应用程序的特定点（例如函数或事件）执行自定义代码，以实现更灵活的功能扩展和定制化。钩子通常与回调函数结合使用，以实现特定的业务逻辑或功能。 当涉及到回调函数和hook时，一段简单的PHP代码示例来说明它们的工作方式：
// 回调函数示例 function greet($name, $callback) { echo &amp;#34;Hello, &amp;#34; . $name . &amp;#34;! &amp;#34;; $callback(); } function goodbye() { echo &amp;#34;Goodbye!&amp;#34;; } // 使用回调函数 greet(&amp;#34;Alice&amp;#34;, &amp;#34;goodbye&amp;#34;); // Hook示例 $hooks = array(); function add_hook($hook_name, $callback) { global $hooks; $hooks[$hook_name][] = $callback; } function run_hook($hook_name) { global $hooks; if (isset($hooks[$hook_name])) { foreach ($hooks[$hook_name] as $callback) { call_user_func($callback); } } } // 添加Hook add_hook(&amp;#39;before_greet&amp;#39;, &amp;#39;goodbye&amp;#39;); // 运行Hook run_hook(&amp;#39;before_greet&amp;#39;); 在这个简单的示例中，首先定义了一个greet函数，它接受一个名字和一个回调函数作为参数。当调用greet函数时，它会打印问候语并执行传递的回调函数。</description>
    </item>
    
    <item>
      <title>Q&amp;A 安装WebGoat：source code，Docker，端口与PID</title>
      <link>https://slientlamb.github.io/post/49070863/</link>
      <pubDate>Thu, 21 Mar 2024 12:15:15 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/49070863/</guid>
      <description>Q1：github上下载的 .zip文件解压后得到source code 怎么用 根据官方文档，从github上获得 webgoat_server.jar及 webgoat_server.jar运行并指定运行端口即可，但是从github上下下来的 .zip解压后得到 source code： A1： 源码安装一般应用于Linux系统，通过cmake编译链接源码进行安装软件。
- ./configure - make - make install Q2：Docker是什么 官方文档另外推荐Docker安装，遂浏览Docker相关文档Docker官网上介绍容器页面的图片很容易理解，Docker是可以装各种“Application”的“container”，使应用程序能在不同操作系统运行。
容器是打包代码及其所有依赖项的标准软件单元，因此应用程序可以从一个计算环境快速可靠地运行到另一个计算环境。Docker 容器映像是一个轻量级、独立、可执行的软件包，其中包含运行应用程序所需的一切：代码、运行时、系统工具、系统库和设置。 容器镜像在运行时成为容器，在 Docker 容器的情况下，镜像在Docker Engine 上运行时成为容器。可用于基于 Linux 和 Windows 的应用程序，容器化软件将始终运行相同，无论基础架构如何。容器将软件与其环境隔离开来，并确保它能够一致地工作，尽管存在差异，例如开发和登台。 在 Docker Engine 上运行的 Docker 容器： 标准： Docker 为容器创建了行业标准，因此它们可以在任何地方移植 轻量级：容器共享机器的操作系统内核，因此每个应用程序不需要操作系统，从而提高服务器效率并降低服务器和许可成本 安全：应用在容器中更安全，Docker 提供业界最强的默认隔离能力
Q3：端口，进程，PID 端口： &amp;ldquo;端口&amp;quot;是英文port的意译，可以认为是设备与外界通讯交流的出口。端口可分为虚拟端口和物理端口，其中虚拟端口指计算机内部或交换机路由器内的端口，不可见。例如计算机中的80端口、21端口、23端口等。物理端口又称为接口，是可见端口，计算机背板的RJ45网口，交换机路由器集线器等RJ45端口。电话使用RJ11插口也属于物理端口的范畴。
进程与PID 进程之间通信需要通过端口。</description>
    </item>
    
    <item>
      <title>Burp Lab Note: 2FA broken logic</title>
      <link>https://slientlamb.github.io/post/64170246/</link>
      <pubDate>Thu, 21 Mar 2024 12:15:05 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/64170246/</guid>
      <description>观察正常用户登录流程 POST 用户名/口令POST 四位验证码
这种登录逻辑可以尝试爆破口令 口令爆破后，四位验证码，无过期时间，尝试爆破 问题 一开始的思路是修改请求包中的用户，用别的邮箱收取验证码尝试后可以接受验证码，但不能通过校验，目前没找到解答</description>
    </item>
    
    <item>
      <title>Q&amp;A Windows 指定端口 情况</title>
      <link>https://slientlamb.github.io/post/66957596/</link>
      <pubDate>Wed, 20 Mar 2024 13:55:49 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/66957596/</guid>
      <description>Q:Windows下如何查看某个端口被谁占用 A： 列出所有端口使用情况 netstat -ano
查看被占用端口对应的 PID netstat -aon|findstr &amp;quot;7890&amp;quot;
查看指定 PID 的进程 tasklist|findstr &amp;quot;20920&amp;quot;
结束进程 强制（/F参数）杀死 pid 为 20920 的所有进程包括子进程（/T参数）：taskkill /T /F /PID 20920 C：windows平台下netstat常用命令 C:\Users\Administrator&amp;gt;netstat &amp;ndash;help
显示协议统计和当前 TCP/IP 网络连接。
NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-t] [interval]
-a 显示所有连接和侦听端口。 -b 显示在创建每个连接或侦听端口时涉及的可执行程序。 在某些情况下，已知可执行程序承载多个独立的 组件，这些情况下，显示创建连接或侦听端口时涉 及的组件序列。此情况下，可执行程序的名称 位于底部[]中，它调用的组件位于顶部，直至达 到 TCP/IP。注意，此选项可能很耗时，并且在您没有 足够权限时可能失败。 -e 显示以太网统计。此选项可以与 -s 选项结合使用。 -f 显示外部地址的完全限定域名(FQDN)。 -n 以数字形式显示地址和端口号。 -o 显示拥有的与每个连接关联的进程 ID。 -p proto 显示 proto 指定的协议的连接；proto 可以是下列任 何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s 选 项一起用来显示每个协议的统计，proto 可以是下列任 何一个: IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。 -r 显示路由表。 -s 显示每个协议的统计。默认情况下，显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计；-p 选项可用于指定默认的子网。 -t 显示当前连接卸载状态。 interval 重新显示选定的统计，各个显示间暂停的间隔秒数。 按 CTRL+C 停止重新显示统计。如果省略，则 netstat 将打印当前的配置信息一次。</description>
    </item>
    
    <item>
      <title>Q&amp;A AD域中，为什么有些账户带后缀$</title>
      <link>https://slientlamb.github.io/post/159192175/</link>
      <pubDate>Wed, 21 Feb 2024 15:10:47 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/159192175/</guid>
      <description>Q: 带后缀$的是什么账户? A: 在域账户中，名称后缀带有$符号的账户通常是计算机账户或服务账户。这种命名约定是为了区分普通用户账户和特殊账户。这些账户通常用于系统服务、应用程序或网络资源的身份验证和授权，而不是用于用户登录和交互。因此，带有$后缀的账户通常是系统或服务级别的账户，而不是人员使用的账户。 C: 命令涉及该类账户时，是否要带后缀 在远程连接时指定计算机账户或服务账户时，通常需要在账户名称后面加上$符号。这是因为远程连接通常要求明确指定计算机账户或服务账户，以便正确识别和验证目标账户。因此，在远程连接时，应该使用带$后缀的账户名称。
而在本地枚举或操作时，并不需要在账户名称后面加上$符号。本地操作通常会自动识别计算机账户或服务账户，不需要额外标识符号来区分。所以在本地环境下，通常可以直接使用账户名称而无需添加$后缀。</description>
    </item>
    
    <item>
      <title>Q&amp;A COM和DCOM</title>
      <link>https://slientlamb.github.io/post/158623701/</link>
      <pubDate>Sat, 17 Feb 2024 01:19:49 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/158623701/</guid>
      <description>Q1：Windows相关技术中的COM和DCOM概念是什么 A： 在Windows中，DCOM代表分布式组件对象模型（Distributed Component Object Model），而COM代表组件对象模型（Component Object Model）。
COM（组件对象模型）：COM是一种面向对象的编程模型，用于创建可重用的软件组件。它允许开发人员将代码封装在独立的组件中，这些组件可以被其他程序调用和重复使用。COM组件可以通过接口进行通信，提供了一种灵活且可扩展的方式来构建应用程序。
DCOM（分布式组件对象模型）：DCOM是COM的扩展，它允许在分布式环境中进行通信和交互。DCOM允许远程计算机上的应用程序通过网络进行通信，并调用远程计算机上的COM组件。这使得在不同计算机之间进行分布式编程和通信变得更加容易。
总的来说，COM提供了一种组件化的编程模型，而DCOM扩展了COM的功能，使得在分布式环境中进行通信和调用更加方便和灵活。这两种技术在Windows平台上被广泛应用于开发应用程序和构建复杂的系统。 Q2：能举例使用COM或DCOM技术的常见应用或系统吗，已经该模型在应用中起到了什么样的作用 A： COM和DCOM技术在Windows系统中有许多应用和系统中得到了广泛应用。以下是一些常见的应用和系统：
Microsoft Office：Microsoft Office套件中的各种应用程序（如Word、Excel、PowerPoint等）使用COM技术来提供可编程的对象模型，使开发人员可以通过编程方式操纵和操作Office应用程序。 Internet Explorer：Internet Explorer浏览器使用COM技术来支持插件和扩展功能，使开发人员能够创建自定义的浏览器插件。 Windows Shell：Windows Shell（包括资源管理器等）使用COM技术来提供对Windows操作系统的访问和控制，例如创建自定义的Shell扩展程序。 Active Directory：Active Directory服务使用DCOM技术来支持分布式环境中的目录服务，实现对用户、计算机和其他资源的管理和访问控制。 Microsoft Exchange Server：Microsoft Exchange Server使用DCOM技术来支持邮件传递、日历共享等功能，在分布式环境中提供协作和通信服务。 在这些应用和系统中，COM和DCOM技术起到了关键作用，使得不同组件之间可以进行通信、交互和协作。它们提供了一种灵活、可重用的编程模型，帮助开发人员构建复杂的应用程序和系统，同时支持分布式环境下的组件通信和调用。</description>
    </item>
    
    <item>
      <title>Q&amp;A JNI Error</title>
      <link>https://slientlamb.github.io/post/63251819/</link>
      <pubDate>Fri, 16 Feb 2024 06:38:19 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/63251819/</guid>
      <description>Error:A JNI error has occurred,please check your installation and try again 启动Burpsuite时，提示以上错误
JNI：
JNI是Java Native Interface的缩写，通过使用 Java本地接口书写程序，可以确保代码在不同的平台上方便移植。
搜索后发现原因是java -verion 和 javac -version 版本不一致所以cmd打开
C:\Users\lak&amp;gt;java -version java version &amp;#34;1.8.0_311&amp;#34; Java(TM) SE Runtime Environment (build 1.8.0_311-b11) Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode) C:\Users\lak&amp;gt;javac -version &amp;#39;javac&amp;#39; 不是内部或外部命令，也不是可运行的程序 或批处理文件。 问题出在没有javac
搜索javac后得到解答：
命令行里运行的java.exe来自Public JRE，具体来说在C:\Windows\System32\java.exe。它会找到您系统上现在装着的那个Public JRE的具体路径去运行Java程序。 而javac.exe不是JRE的一部分，而是JDK的。JDK的安装程序不会自动将自己的bin目录配置到PATH环境变量上，所以在命令行里也看不到它。 要解决这个问题要么自己手动把JDK安装目录的bin目录配置到PATH环境变量里，要么在命令行用JDK的全路径去访问javac.exe。
作者：RednaxelaFX链接：https://www.zhihu.com/question/28428426/answer/40774504来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
问题解决。
遇到新问题 打开Burp提示如下错误：--add-opens=java.desktop/javax.swing=ALL-UNNAMED--add-opens=java.baseljava.lang=ALL-UNNAMED
网上找到的方法：未解决
转变思路，在启动脚本里加上这些参数编辑start.bat文件
start &amp;#34;burpsuite&amp;#34; /B &amp;#34;javaw.exe&amp;#34; -Xmx8G -XX:-UseParallelGC --add-opens=java.desktop/javax.swing=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED -noverify -javaagent:BurpSuiteLoader_v2021.</description>
    </item>
    
    <item>
      <title>Q&amp;A windows下使用wget等linux命令 &amp;&amp; godzilla目录设置白名单</title>
      <link>https://slientlamb.github.io/post/83109254/</link>
      <pubDate>Mon, 25 Dec 2023 03:11:21 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/83109254/</guid>
      <description>Q1:godzilla用浏览器下载会报毒然后删除，就想着用wget命令行下载 环境：shell：powershell
A:安装GNUWIN32 https://sourceforge.net/projects/gnuwin32/files/ 有以下命令：
Name Modified Downloads / Week sed 2010-12-28 2,136 m4 2010-05-26 319 dehtml 2010-02-11 0 libpng 2009-06-04 319 file 2009-05-07 289 bison 2009-05-04 847 indent 2009-02-15 162 grep 2009-02-13 921 tree 2009-02-09 334 fatattr 2009-02-01 105 ed 2009-02-01 170 mktemp 2009-01-11 114 groff 2009-01-10 216 wget 2008-12-31 4,036 tre 2008-12-20 214 hello 2008-12-10 149 glpk 2008-12-04 200 openssl 2008-12-04 978 dmidecode 2008-12-03 143 grap 2008-10-28 96 autoconf 2008-10-16 152 texinfo 2008-10-02 194 units 2008-09-28 122 util-linux 2008-09-28 277 cygutils 2008-09-26 179 troff 2008-09-23 85 which 2008-08-10 84 sunrpc 2008-08-09 86 rpl 2008-07-19 89 zip 2008-07-13 840 libarchive 2008-06-27 200 crafty 2008-06-13 100 x86info 2008-06-13 95 t1utils 2008-03-24 106 bzip2 2008-03-20 500 freetype 2008-03-14 308 a2ps 2008-03-14 197 libtool 2008-02-10 150 gawk 2008-02-10 571 nawk 2008-02-09 76 gsar 2008-02-04 73 minised 2008-01-05 75 readline 2008-01-02 143 regex 2007-11-03 320 gzip 2007-10-15 609 diction 2007-09-13 107 gengetopt 2007-07-07 129 patch 2007-05-15 810 libpaper 2007-05-09 159 barcode 2007-05-09 212 pcre 2007-04-03 220 libungif 2007-03-01 209 giflib 2007-02-21 232 regex-Spencer 2006-12-19 3 make 2006-11-25 6,923 gsl 2006-07-11 211 tiff 2006-03-30 311 fax2png 2006-03-29 161 cpio 2006-03-09 154 id-utils 2006-03-09 157 gri 2006-01-29 92 libiconv 2006-01-29 528 edll-bfd 2006-01-08 94 edll 2006-01-08 87 less 2006-01-03 124 src-highlite 2005-11-19 56 rx 2005-11-19 84 psutils 2005-11-19 82 piechart 2005-11-19 80 pbmadd 2005-11-19 55 mawk 2005-11-19 58 libart_lgpl 2005-11-19 88 lha 2005-11-19 99 jpeg2ps 2005-11-19 75 doschk 2005-11-19 73 compface 2005-11-19 116 chsuf 2005-11-19 76 awka 2005-11-19 110 asciichart 2005-11-19 110 arj 2005-11-19 83 filetype 2005-09-10 99 jwhois 2005-09-09 124 zimg 2005-08-26 152 gd 2005-08-26 148 libopennet 2005-08-20 126 libconfig 2005-08-20 183 t1lib 2005-08-13 141 pdflib-lite 2005-08-13 137 hodie 2005-07-31 97 cpuid 2005-07-31 108 zlib 2005-07-25 662 jpeg 2005-05-15 295 hp2xx 2005-05-14 211 netpbm 2005-05-12 262 libintl 2005-05-07 361 gettext 2005-05-07 284 help2man 2005-04-24 100 cproto 2005-04-24 103 coreutils 2005-04-21 2,375 findutils 2005-04-18 167 arc 2005-04-11 77 re2c 2005-03-15 80 nenscript 2005-03-13 74 pdcurses 2005-03-13 112 calc 2005-03-12 154 bc 2005-03-11 144 unrar 2005-02-20 156 xpm 2005-02-14 172 xpm2wico 2005-02-14 108 unzip 2005-02-14 375 unrtf 2005-02-12 105 sgrep 2005-01-31 106 libwmf 2005-01-18 205 psmark 2005-01-17 112 automake 2004-12-19 134 gdbm 2004-12-18 183 iristools 2004-11-28 245 gcal 2004-11-28 160 wv 2004-11-21 210 gperf 2004-11-14 356 miscfiles 2004-10-24 48 jbigkit 2004-06-11 153 diffutils 2004-05-24 941 plotutils 2004-04-16 168 libxmi 2004-04-16 127 flex 2004-04-11 541 deroff 2004-03-24 151 fdlibm 2004-03-24 135 ntfsprogs 2004-03-15 208 attr 2004-03-15 192 mscompress 2004-03-14 109 sharutils 2004-03-12 150 pngutils 2004-01-26 144 libgw32c 2004-01-10 207 ttf2pt1 2004-01-02 196 urt 2003-12-27 177 btyacc 2003-10-30 86 chess 2003-10-25 91 polyglotman (rman) 2003-10-18 85 xpdf 2003-10-14 88 byacc 2003-10-04 95 popt 2003-10-04 174 tar 2003-10-03 394 libutf8 2003-09-27 151 enscript 2003-07-19 105 palm pilot 2003-03-30 231 hextools 2003-03-04 122 hex2bin 2003-03-04 140 bmp2png 2002-07-07 57 imgtops2 2002-07-05 223 libxml 2002-06-23 340 crypt 2002-04-30 331 termcap 2002-03-16 329 glibc-doc 2002-02-02 1 gcc-doc 2002-01-27 112 libxslt 2001-12-23 339 cppi 2001-12-08 112 scribe2latex 2001-08-08 233 bm2font 2001-05-23 243 dvidjk 2001-04-10 235 Q2：godzilla被chrome、Microsoft Defender删除 A2 chrome设置不保护：设置目录为Microsoft Defender白名单 C：minGW,cygwin,gnuwin32区别 minGW给那些习惯于再Linux上开发的人员，在windows上提供了一套类似的工具集。 cygwin主要是对于再Linux的程序，无需改动代码即可移植到windows上 gnuwin32主要是对习惯linux工具的人员，在windows上提供一套类似的命令。</description>
    </item>
    
    <item>
      <title>Q&amp;A NetBIOS名称和FQDN的区别</title>
      <link>https://slientlamb.github.io/post/149364810/</link>
      <pubDate>Wed, 06 Dec 2023 09:46:33 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/149364810/</guid>
      <description>NetBIOS名称和完全限定域名（Fully Qualified Domain Name）是两种不同的命名系统。
NetBIOS名称是一种用于本地网络的命名系统，它基于NetBIOS协议，用于标识和定位网络中的计算机和资源。NetBIOS名称通常是单个词或短语，例如&amp;quot;MYCOMPUTER&amp;quot;或&amp;quot;PRINTERSHARE&amp;quot;。它们在局域网内具有唯一性，但在全局范围内不是唯一的。
完全限定域名（FQDN）是一个更加全局和层次化的命名系统，用于在互联网上唯一标识和定位计算机和资源。FQDN由主机名（hostname）和域名（domain name）组成，它们之间用点号（.）分隔。例如，&amp;ldquo;www.example.com &amp;quot;是一个FQDN，其中&amp;quot;www&amp;quot;是主机名，&amp;ldquo;example.com&amp;quot;是域名。FQDN是全局唯一的，可以用来访问互联网上的任何计算机或资源。
因此，NetBIOS名称主要用于局域网内部的标识和定位，而FQDN则用于全局范围内的唯一标识和定位。</description>
    </item>
    
    <item>
      <title>Q&amp;A WPAD协议</title>
      <link>https://slientlamb.github.io/post/149218004/</link>
      <pubDate>Tue, 05 Dec 2023 07:51:53 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/149218004/</guid>
      <description>Q1：什么是WPAD协议 WPAD协议（Web Proxy Autodiscovery Protocol）是一种用于自动发现Web代理服务器的协议。它允许客户端在没有手动配置的情况下，自动发现可用的代理服务器，以便在网络中进行Web访问。WPAD协议通常使用DHCP或DNS服务来提供代理服务器的地址信息，或者使用本地网络中的特定URL来查找代理服务器的配置文件。 Q2：协议的具体过程 WPAD协议的具体过程如下：
客户端在本地网络中发现DHCP服务器或DNS服务器，并向其发送WPAD自动发现请求。 DHCP或DNS服务器返回一个指向代理配置文件的URL，客户端使用该URL下载代理配置文件。 客户端读取代理配置文件，获取代理服务器的地址和端口号。 客户端使用代理服务器进行Web访问。 总之，WPAD协议通过在本地网络中查找DHCP或DNS服务器，并使用特定的URL查找代理配置文件，从而实现自动发现Web代理服务器的功能。它可以帮助客户端在没有手动配置的情况下，自动发现可用的Web代理服务器，以便在网络中进行Web访问。</description>
    </item>
    
    <item>
      <title>Q&amp;A Hugo &amp;&amp; Git 初使用</title>
      <link>https://slientlamb.github.io/post/80529411/</link>
      <pubDate>Fri, 17 Nov 2023 23:28:16 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/80529411/</guid>
      <description>Hugo生成的时候出现问题 语雀图片问题
md文件html生成不了
md文件加头
图片问题未解决本地显示解决，目前思路来到 hugo的图片引用</description>
    </item>
    
    <item>
      <title>Q&amp;A 部署虚拟机失败</title>
      <link>https://slientlamb.github.io/post/48886722/</link>
      <pubDate>Fri, 17 Nov 2023 23:24:22 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/48886722/</guid>
      <description>Q: A: 启动电脑时，按下F1进入BIOS界面，查找对应项，把&amp;quot;Intel Virtual Technology&amp;quot;（Intel虚拟技术）改为&amp;quot;enabled&amp;quot;</description>
    </item>
    
    <item>
      <title>Q&amp;A 已编译的二进制文件 和 库文件 的关系</title>
      <link>https://slientlamb.github.io/post/141990291/</link>
      <pubDate>Wed, 11 Oct 2023 02:25:41 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/141990291/</guid>
      <description>Q1： 什么是glibc？ A2： glibc是GNU C库的简称，是一种C语言函数库，是GNU操作系统的一部分。它包含了许多标准C库函数，如字符串处理、数学运算、输入输出等。此外，glibc还包含了一些非标准的扩展函数，如线程支持、动态内存分配等。glibc被广泛用于Linux操作系统和其他类Unix系统中，是许多应用程序和系统工具的基础。
Q2： 运行已经编译的二进制文件，会因为glibc版本太老而失败吗？ A2： 如果运行的二进制文件是使用较新版本的glibc编译的，而系统中只安装了较旧版本的glibc，则可能会导致运行失败。这是因为较新版本的glibc包含了一些较旧版本不具备的新特性和函数，这些特性和函数在较旧版本的glibc中是不可用的。因此，建议运行二进制文件之前检查您的系统中安装的glibc版本，确保它至少与二进制文件使用的版本相同，以避免运行失败。
Q3： 运行已经编译的二进制文件，为什么会被库的版本影响？已经编译的二进制文件不应该可以独立运行吗？ A3： 因为库版本不兼容可能会导致二进制文件无法找到所需的函数或符号，从而无法正常运行。虽然已编译的二进制文件可以独立运行，但它们仍然需要依赖于系统中安装的库文件。因此，如果您的系统中安装的库版本与二进制文件需要的版本不兼容，可能会导致运行失败。虽然已编译的二进制文件包含了它们自己所需的一些库文件，但是它们仍然需要依赖于系统中安装的一些共享库文件。当运行二进制文件时，操作系统会自动加载这些共享库文件，并将它们映射到进程的地址空间中。因此，如果系统中缺少所需的共享库文件或者版本不兼容，可能会导致运行失败。</description>
    </item>
    
    <item>
      <title>Q&amp;A curl 的静默模式</title>
      <link>https://slientlamb.github.io/post/139898262/</link>
      <pubDate>Thu, 14 Sep 2023 08:55:21 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/139898262/</guid>
      <description>问题概述：在Apache的日志中毒攻击中，使用curl访问附带payload的url不会被执行，但是使用-s参数会被执行，查看帮助文档只能发现是静默模式，没有更多解释。
curl -s -s 选项代表“静默”或“安静”模式，这意味着在请求期间该命令不会显示任何进度或错误消息。这对于编写脚本或自动化任务很有用，因为不会产生杂乱的输出干扰结果。
Q1： 为什么使用curl访问http://192.168.1.1:1/index.php?file=../../../../../var/log/apache2/access.log&amp;amp;cmd=whoami不成功，但是加上-s能成功执行whoami A1： 这是因为在访问http://192.168.1.1:1/index.php?file=../../../../../var/log/apache2/access.log&amp;amp;cmd=whoami时，尝试通过URL参数来注入命令，但是由于Apache服务器的安全限制，它会防止你执行任何危险的命令。因此，你需要使用curl -s命令中的-s选项来使请求变得“安静”或“静默”，以便绕过Apache服务器的安全限制，从而成功执行whoami命令。请注意，这种做法是不安全的，因为它可以导致潜在的安全漏洞和攻击。 Q2：这种安全限制具体指什么？ A2： 这种安全限制指的是 Apache 服务器的安全机制，它会防止用户通过 URL 参数来注入危险的命令或脚本，从而保护服务器免受潜在的攻击和漏洞。这种安全机制可以通过配置 Apache 服务器的安全策略来实现，例如使用 mod_security 模块或其他类似的安全插件。这些安全插件可以检测和拦截恶意请求，从而保护服务器的安全性。 Q3：为什么curl -s的静默模式可以绕过这种安全机制 curl -s 命令的静默模式并不能直接绕过 Apache 服务器的安全机制，但是它可以在一定程度上隐藏请求的细节，从而使请求更加难以被服务器检测到。在这种情况下，curl -s 命令发送的请求中，URL 参数中的 file 参数被用于读取 Apache 服务器的访问日志文件，而 cmd 参数则被用于执行 whoami 命令。由于这些操作可能被认为是恶意行为，因此 Apache 服务器会尝试阻止它们的执行。然而，由于 curl -s 命令在请求过程中不会显示任何进度或错误消息，因此它可以在一定程度上隐藏请求的细节，使得服务器更难以检测到恶意行为。但是需要注意的是，这种做法仍然存在潜在的安全风险，因为攻击者可以使用其他更加隐蔽和复杂的技术来绕过服务器的安全机制。</description>
    </item>
    
    <item>
      <title>Q&amp;A Metasploit框架下.rb文件的使用</title>
      <link>https://slientlamb.github.io/post/131761807/</link>
      <pubDate>Fri, 01 Sep 2023 02:26:37 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/131761807/</guid>
      <description>.rb是Ruby语言文件，按规定格式编写的rb文件可以导入到MSF中使用。
1、在/usr/share/metasploit-framework/modules/exploits/下创建目录，然后将rb文件复制进来
2、在MSF下reload_all重新加载所有模块3、使用search命令找到到添加的模块3、输入use exploit/[filename]/exp即可使用</description>
    </item>
    
    <item>
      <title>Q&amp;A 交叉编译时，提示fatal error: cannot execute ‘cc1plus’: execvp: No such file or directory</title>
      <link>https://slientlamb.github.io/post/137843025/</link>
      <pubDate>Wed, 30 Aug 2023 12:30:58 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/137843025/</guid>
      <description>
Q： 在交叉编译DLL时：x86_64-w64-mingw32-gcc DLL.cpp --shared -o DLL.dll报错：fatal error: cannot execute ‘cc1plus’: execvp: No such file or directory A: 以fatal error: cannot execute ‘cc1plus’为核心搜索，确定问题是缺少对应的g++编译器参考：Compile error: “g++: error trying to exec ‘cc1plus’: execvp: No such file or directory” 那么解决办法就是安装对应架构下的g++编译器：方法来自网站：https://command-not-found.com/ </description>
    </item>
    
    <item>
      <title>Q&amp;A  谷歌 Chrome 浏览器无法翻译网页的问题</title>
      <link>https://slientlamb.github.io/post/107195601/</link>
      <pubDate>Sun, 09 Jul 2023 01:04:32 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/107195601/</guid>
      <description>
Q: chrome浏览器没法正常使用网页翻译功能 其实在网上讨论之前就发现了这个问题，当时的解决方法是在swithy中给translate.googleapis.com和translate.google.com配置代理模式，当时短暂的解决了问题，后来发现失效了 A:寻找可用的服务器并配置hosts文件 首先执行：nslookup google.com修改hosts文件translate.google.com	X.X.X.Xtranslate.googleapis.com X.X.X.X </description>
    </item>
    
    <item>
      <title>Q&amp;A  将wsl2配置为桥接模式</title>
      <link>https://slientlamb.github.io/post/124980952/</link>
      <pubDate>Wed, 17 May 2023 02:53:15 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/124980952/</guid>
      <description>要将 Kali Linux WSL2 子系统设置为桥接模式，您需要执行以下步骤：
首先，打开 PowerShell 终端并输入以下命令以停止 WSL2 子系统： wsl --shutdown 打开 Hyper-V 管理器，找到您的 WSL2 虚拟交换机并记下其名称。 在 PowerShell 终端中输入以下命令以将 WSL2 子系统转换为虚拟机： wsl --set-version &amp;lt;distribution name&amp;gt; 2 其中， 是您的 Kali Linux 发行版的名称。
在 Hyper-V 管理器中创建一个新的虚拟交换机，并将其设置为外部网络。 在 PowerShell 终端中输入以下命令以将 WSL2 子系统连接到新的外部虚拟交换机： Get-NetAdapter | Where-Object {$_.InterfaceDescription -Like &amp;#34;*WSL*&amp;#34;} | New-NetIPAddress -IPAddress &amp;lt;IP address&amp;gt; -PrefixLength &amp;lt;subnet mask&amp;gt; -DefaultGateway &amp;lt;gateway IP&amp;gt; | Set-NetIPInterface -InterfaceAlias &amp;#34;vEthernet (WSL)&amp;#34; 其中， 是您希望为 Kali Linux 分配的 IP 地址， 是子网掩码， 是网关 IP 地址。</description>
    </item>
    
    <item>
      <title>Q&amp;A  Wireshark抓不到SSH的数据包</title>
      <link>https://slientlamb.github.io/post/55817841/</link>
      <pubDate>Sun, 07 May 2023 09:21:51 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/55817841/</guid>
      <description>Q: A: C： 附件：/</description>
    </item>
    
    <item>
      <title>Q&amp;A  基于WSL2的Docker镜像存储位置修改</title>
      <link>https://slientlamb.github.io/post/83953847/</link>
      <pubDate>Sat, 06 May 2023 13:42:50 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/83953847/</guid>
      <description>
Q:基于WSL2的docker软件没有给出调整镜像存放位置的功能，需要我们手动的来调整 A: 1、wsl -l -v --all查询所有wsl子系统状态2、关闭Docker3、导出WSL系统wsl --export docker-desktop /目录/目标文件.tarwsl --export docker-desktop-data /目录/目标文件.tar4、把导出的tar文件放入新建目的目录中5、导入wsl --import docker-desktop F:\Docker\docker-desktop F:\docker-desktop.tar --version 2wsl --import docker-desktop-data F:\Docker\docker-desktop-data F:\docker-desktop-data.tar --version 2硬盘镜像文件已经迁移过来了。 C：WSL子系统的备份和还原 终止正在运行的wsl wsl --shutdown
将需要迁移的Linux，进行导出 wsl --export kali-linux F:/kali.tar
导出完成之后，就需要将原有的分发进行卸 wsl --unregister kali-linux
然后将导出的文件放到需要保存的地方，进行导入即可 wsl --import kali-linux F:/WSL/KALI F:/kali.tar
WSL备份与还原 </description>
    </item>
    
    <item>
      <title>Q&amp;A WSL2使用Kex窗口模式  报错连接失败</title>
      <link>https://slientlamb.github.io/post/120591485/</link>
      <pubDate>Tue, 04 Apr 2023 02:42:02 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/120591485/</guid>
      <description>Q：报错如下 使用窗口模式时kex --win
Error connecting to the KeX server. Please try &amp;#34;kex start&amp;#34; to start the service. If the server fails to start, please try &amp;#34;kex kill&amp;#34; or restart your WSL2 session and try again. A： 重新挂载/tmp/.X11-unixsudo mount -o remount,rw /tmp/.X11-unix-o remount：将一个已经挂下的档案系统重新用不同的方式挂上。例如原先是唯读的系统，现在用可读写的模式重新挂上。-o rw：用可读写模式挂上。
然后vncserverkex</description>
    </item>
    
    <item>
      <title>Q&amp;A  制作Kali容器</title>
      <link>https://slientlamb.github.io/post/110963935/</link>
      <pubDate>Thu, 05 Jan 2023 07:20:27 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/110963935/</guid>
      <description>step1 拉取镜像并启动 PS C:\Users\25038&amp;gt; docker pull docker.io/kalilinux/kali-rollingPS C:\Users\25038&amp;gt; docker run --tty --interactive -p 7000:22 kalilinux/kali-rolling以互动模式启动并配置ssh端口 step2 安装相关必须软件 更新源apt-get update安装vimapt-get install vim修改软件源vim /etc/apt/sources.list
#阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙江大学 deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free
kali官方源 deb http://http.kali.org/ kali-rolling main non-free contrib deb-src http://http.</description>
    </item>
    
    <item>
      <title>Docker    #cheat sheet</title>
      <link>https://slientlamb.github.io/post/110943906/</link>
      <pubDate>Wed, 04 Jan 2023 09:15:42 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/110943906/</guid>
      <description>容器使用常用命令 获取镜像 docker pull ubuntu
运行容器 docker run -i -t ubuntu:15.10 /bin/bash
-t: 在新容器内指定一个伪终端或终端。 -i: 允许你对容器内的标准输入 (STDIN) 进行交互。 -d：以进程（后台）模式运行一个容器 关闭、启动、删除容器 docker stopdocker startdocker rm -f 查看所有容器 docker ps -a
检查容器状态 docker inspect 它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息
进入容器 docker exec -it 243c32535da7 /bin/bash
导入导出容器 docker export 1e560fca3906 &amp;gt; ubuntu.tardocker import http://example.com/exampleimage.tgz example/imagerepo
运行一个web应用 runoob@runoob:~# docker pull training/webapp # 载入镜像 runoob@runoob:~# docker run -d -P training/webapp python app.py
-P：将容器内部使用的网络端口随机映射到我们使用的主机上。 -p：指定宿主机到容器端口的映射 5000：5000 镜像使用 Pull 拉取镜像 search 查找镜像 rmi	删除镜像 构建镜像 包括两种，一种是通过容器构建，一种是通过Dockerfile，基于个人使用目的只记录第一种docker commit -m=&amp;quot;has update&amp;quot; -a=&amp;quot;runoob&amp;quot; e218edb10161 runoob/ubuntu:v2</description>
    </item>
    
    <item>
      <title>停止记录的这一两个月</title>
      <link>https://slientlamb.github.io/post/97188785/</link>
      <pubDate>Wed, 19 Oct 2022 01:01:57 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/97188785/</guid>
      <description>上次这个栏目的博客更新还是在8月1号，这近两个月没有动手写下些东西属实惭愧。这个栏目的博客记录之初的目的记录遇到的各种闲散类别的问题的一些解决方案和相关背景知识。我之所以写这个就是想把自己的知识涉猎面拓展的宽一些，遇到的各种各样的问题，关于系统环境，硬件适配，资源获取，等等各种涉及技术相关的，找的合适的解决方案，并尽量搞清楚原理这样。我还是想聊聊为什么没咋记录了： 外部原因 不想把这些事情当作托辞，所以只说最重要的一点：我在9月初离职了。说实话，在要上班的时期，因为对工作的反感（更多是上班的不自由感受），反而对学习新事物有很多的兴趣。遇到了问题也更想多寻根问底一些。不上班的时候，遇到的问题变少了，自然就不会想起来更新。另一点是，上一份工作的直系上次是对我从事的技术一知半解的中年职场精英，有一次在午休时被看到写工作无关的博文时被看到了；然后他语重心长的说了一些什么话，当时我完全没意识到他是在点我。由于对人际的厌恶，所以厌屋及乌，不想写博记录也是合理的吧（。_ 。） 内部原因 这个就值得仔细分析下了，因为之后想要稳定地有价值的产出和记录，需要自己克服调整才行。 完美主义作祟 回顾一下记录这部分博客的目的，就是在找解决方案的同时，对问题有进一步的思考和认知。这就导致了在遇到一些比较深的问题时，我可能尝试出了解决的办法，但是找不到问题原因所在和原理等等。这会让我觉得些许挫败，找不到值得记录的意义。</description>
    </item>
    
    <item>
      <title>Q&amp;A windows下使用wget等linux命令 &amp;&amp; godzilla目录设置白名单</title>
      <link>https://slientlamb.github.io/post/windows%E4%B8%8Bgnu%E5%92%8Cmicrosoftdefender%E7%99%BD%E5%90%8D%E5%8D%95/</link>
      <pubDate>Wed, 13 Jul 2022 14:59:29 +0800</pubDate>
      
      <guid>https://slientlamb.github.io/post/windows%E4%B8%8Bgnu%E5%92%8Cmicrosoftdefender%E7%99%BD%E5%90%8D%E5%8D%95/</guid>
      <description>Q1:godzilla用浏览器下载会报毒然后删除，就想着用wget命令行下载 环境：shell：powershell
A1:安装GNUWIN32 https://sourceforge.net/projects/gnuwin32/files/ 有以下命令：
Name Modified Downloads / Week sed 2010-12-28 2,136 m4 2010-05-26 319 dehtml 2010-02-11 0 libpng 2009-06-04 319 file 2009-05-07 289 bison 2009-05-04 847 indent 2009-02-15 162 grep 2009-02-13 921 tree 2009-02-09 334 fatattr 2009-02-01 105 ed 2009-02-01 170 mktemp 2009-01-11 114 groff 2009-01-10 216 wget 2008-12-31 4,036 tre 2008-12-20 214 hello 2008-12-10 149 glpk 2008-12-04 200 openssl 2008-12-04 978 dmidecode 2008-12-03 143 grap 2008-10-28 96 autoconf 2008-10-16 152 texinfo 2008-10-02 194 units 2008-09-28 122 util-linux 2008-09-28 277 cygutils 2008-09-26 179 troff 2008-09-23 85 which 2008-08-10 84 sunrpc 2008-08-09 86 rpl 2008-07-19 89 zip 2008-07-13 840 libarchive 2008-06-27 200 crafty 2008-06-13 100 x86info 2008-06-13 95 t1utils 2008-03-24 106 bzip2 2008-03-20 500 freetype 2008-03-14 308 a2ps 2008-03-14 197 libtool 2008-02-10 150 gawk 2008-02-10 571 nawk 2008-02-09 76 gsar 2008-02-04 73 minised 2008-01-05 75 readline 2008-01-02 143 regex 2007-11-03 320 gzip 2007-10-15 609 diction 2007-09-13 107 gengetopt 2007-07-07 129 patch 2007-05-15 810 libpaper 2007-05-09 159 barcode 2007-05-09 212 pcre 2007-04-03 220 libungif 2007-03-01 209 giflib 2007-02-21 232 regex-Spencer 2006-12-19 3 make 2006-11-25 6,923 gsl 2006-07-11 211 tiff 2006-03-30 311 fax2png 2006-03-29 161 cpio 2006-03-09 154 id-utils 2006-03-09 157 gri 2006-01-29 92 libiconv 2006-01-29 528 edll-bfd 2006-01-08 94 edll 2006-01-08 87 less 2006-01-03 124 src-highlite 2005-11-19 56 rx 2005-11-19 84 psutils 2005-11-19 82 piechart 2005-11-19 80 pbmadd 2005-11-19 55 mawk 2005-11-19 58 libart_lgpl 2005-11-19 88 lha 2005-11-19 99 jpeg2ps 2005-11-19 75 doschk 2005-11-19 73 compface 2005-11-19 116 chsuf 2005-11-19 76 awka 2005-11-19 110 asciichart 2005-11-19 110 arj 2005-11-19 83 filetype 2005-09-10 99 jwhois 2005-09-09 124 zimg 2005-08-26 152 gd 2005-08-26 148 libopennet 2005-08-20 126 libconfig 2005-08-20 183 t1lib 2005-08-13 141 pdflib-lite 2005-08-13 137 hodie 2005-07-31 97 cpuid 2005-07-31 108 zlib 2005-07-25 662 jpeg 2005-05-15 295 hp2xx 2005-05-14 211 netpbm 2005-05-12 262 libintl 2005-05-07 361 gettext 2005-05-07 284 help2man 2005-04-24 100 cproto 2005-04-24 103 coreutils 2005-04-21 2,375 findutils 2005-04-18 167 arc 2005-04-11 77 re2c 2005-03-15 80 nenscript 2005-03-13 74 pdcurses 2005-03-13 112 calc 2005-03-12 154 bc 2005-03-11 144 unrar 2005-02-20 156 xpm 2005-02-14 172 xpm2wico 2005-02-14 108 unzip 2005-02-14 375 unrtf 2005-02-12 105 sgrep 2005-01-31 106 libwmf 2005-01-18 205 psmark 2005-01-17 112 automake 2004-12-19 134 gdbm 2004-12-18 183 iristools 2004-11-28 245 gcal 2004-11-28 160 wv 2004-11-21 210 gperf 2004-11-14 356 miscfiles 2004-10-24 48 jbigkit 2004-06-11 153 diffutils 2004-05-24 941 plotutils 2004-04-16 168 libxmi 2004-04-16 127 flex 2004-04-11 541 deroff 2004-03-24 151 fdlibm 2004-03-24 135 ntfsprogs 2004-03-15 208 attr 2004-03-15 192 mscompress 2004-03-14 109 sharutils 2004-03-12 150 pngutils 2004-01-26 144 libgw32c 2004-01-10 207 ttf2pt1 2004-01-02 196 urt 2003-12-27 177 btyacc 2003-10-30 86 chess 2003-10-25 91 polyglotman (rman) 2003-10-18 85 xpdf 2003-10-14 88 byacc 2003-10-04 95 popt 2003-10-04 174 tar 2003-10-03 394 libutf8 2003-09-27 151 enscript 2003-07-19 105 palm pilot 2003-03-30 231 hextools 2003-03-04 122 hex2bin 2003-03-04 140 bmp2png 2002-07-07 57 imgtops2 2002-07-05 223 libxml 2002-06-23 340 crypt 2002-04-30 331 termcap 2002-03-16 329 glibc-doc 2002-02-02 1 gcc-doc 2002-01-27 112 libxslt 2001-12-23 339 cppi 2001-12-08 112 scribe2latex 2001-08-08 233 bm2font 2001-05-23 243 dvidjk 2001-04-10 235 Q2：godzilla被chrome、Microsoft Defender删除 A2 chrome设置不保护：设置目录为Microsoft Defender白名单 C：minGW,cygwin,gnuwin32区别 minGW给那些习惯于再Linux上开发的人员，在windows上提供了一套类似的工具集。 cygwin主要是对于再Linux的程序，无需改动代码即可移植到windows上 gnuwin32主要是对习惯linux工具的人员，在windows上提供一套类似的命令。</description>
    </item>
    
    <item>
      <title>Q&amp;A Golang在VS CODE环境下的配置</title>
      <link>https://slientlamb.github.io/post/64621319/</link>
      <pubDate>Wed, 06 Jul 2022 02:51:10 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/64621319/</guid>
      <description>新建系统变量GoPATH=C:\Program Files\Go安装插件 失败 尝试更改Go代理源
设置GOPROXY代理： go env -w GOPROXY=https://goproxy.cn,direct
设置GOPRIVATE来跳过私有库，比如常用的Gitlab或Gitee，中间使用逗号分隔： go env -w GOPRIVATE=*.gitlab.com,*.gitee.com
再次安装插件，提示没有权限创建文件夹
管理员权限打开VS CODE
F5调试，出现报错
go.mod file not found in current directory or any parent directory;
网上找到解决办法go env -w GO111MODULE=auto
GO111MODULE是 go modules 功能的开关，关于go modules本文不详述，这个涉及到go的一种很重要的管理机制，我们可以简单的理解为，在没有go modules机制时，go工程中对于第三方功能包的管理非常复杂，也非常专业，这就导致程序员在进行开发的时候，对于第三方功能包的管理很不方便，所以才有了go modules机制。这个机制的开关是通过GO111MODULE环境变量来配置的。 GO111MODULE=off，无模块支持，go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本那种通过vendor目录或者GOPATH模式来查找。GO111MODULE=on，模块支持，go命令行会使用modules，而一点也不会去GOPATH目录下查找。GO111MODULE=auto，默认值，go命令行将会根据当前目录来决定是否启用module功能。这种情况下可以分为两种情形： （1）当前目录在GOPATH/src之外且该目录包含go.mod文件，开启模块支持。 （2）当前文件在包含go.mod文件的目录下面。
问题解决
Q&amp;amp;A go install &amp;amp; go version &amp;amp; Linux下$HOME/.config </description>
    </item>
    
    <item>
      <title>Q&amp;A  go install  &amp; go version &amp;  Linux下$HOME/.config</title>
      <link>https://slientlamb.github.io/post/68494508/</link>
      <pubDate>Wed, 06 Jul 2022 02:40:26 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/68494508/</guid>
      <description>起因是在github，使用go install -v github.com/XXX@latest安装出现了很多问题
不同于其他语言，go中没有项目的说法，只有包, 其中有两个重要的路径，GOROOT 和 GOPATH GOROOT是安装目录，GOPATH是我们的工作空间, 用来存放包的目录 GOPATH可以设置多个，其中，第一个将会是默认的包目录，使用 go get 下载的包都会在第一个path中的src目录下，使用 go install时，在哪个GOPATH中找到了这个包，就会在哪个GOPATH下的bin目录生成可执行文件
Q1：go env GOROOT 指的是go的安装路径，导入go内部库时会去goroot寻找。
GOARCH 表示目标机器的处理器架构，它的值可以是 386、amd64 或 arm。
GOOS 表示目标机器的操作系统，它的值可以是 darwin、freebsd、linux 或 windows。
GOPATH 存放第三方库的路径 Q2：Linux环境下，go install 安装的目录在哪 GOPATH目录bin：放置编译后生成的可执行文件pkg：放置编译后生成的包/库的归档文件src：放置项目和库的源文件
参考：Go 环境变量、go env </description>
    </item>
    
    <item>
      <title>Q&amp;A C&#43;&#43;模块  PIP</title>
      <link>https://slientlamb.github.io/post/63411161/</link>
      <pubDate>Sun, 03 Jul 2022 03:14:25 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/63411161/</guid>
      <description>问题是缺少模块 解决是C++生成工具
引申是 Python Wiki 如何 把python和C++接口联系起来
python byte code C builder tools 编译器 最开始遇到的问题：pip install 失败 提示缺少 Microsoft C++ Builder tools安装后解决
新问题：为什么脚本语言Python 需要C++编译工具
解决过程 了解Python中的编译——&amp;gt; Python byte code了解Microsoft C++ Builder tools——&amp;gt;Microsoft C++ 生成工具通过可编写脚本的独立安装程序提供 MSVC 工具集了解MSVC了解编译器
mmh3 模块 提示需要生成工具 安装配置如下：</description>
    </item>
    
    <item>
      <title>密评（一）</title>
      <link>https://slientlamb.github.io/post/%E5%AF%86%E8%AF%84%E4%B8%80/</link>
      <pubDate>Tue, 28 Jun 2022 23:13:38 +0800</pubDate>
      
      <guid>https://slientlamb.github.io/post/%E5%AF%86%E8%AF%84%E4%B8%80/</guid>
      <description>密评系列文章（一） C0 为什么写这些文章 从事密评工作一年多，期间从事了诸多类型的项目，省级IDC，各部的OA和定制化系统等。在这个过程中耗费时间的并不是技术问题，而是和甲方或者被评测方的对接，因为密评作为近年来出现的事物，各方对其的认识不够，导致想要通过密评的人也不知道需要做些什么。故萌生出了写一系列文章，帮助非行内人员理解密评。 C1 术语定义、系列文章结构 这系列文章是针对非行内人员了解和认识密评所写的，所以我会介绍说明相应的技术，但不会涉及技术细节，同时尽量采取简明的叙述方式让阅读轻松明了。以下是为了方便阅读所使用的一些简称和术语： 密评：全称“商用密码应用安全性评估”，系列文章中使用简称。 密码：指加密、哈希等密码技术，日常概念中登录用的“密码”文章中统一称为口令。 甲方：指系统的实际使用方。 乙方：指应用系统的开发方，一般是开发公司或者集成公司。 第三方：指密评公司。 商密证书：指通过国家密码管理局质量检测后颁发的证书，全称为商用密码产品认证证书（或“商用密码产品型号证书”），想要通过密评务必要使用具备商密证书的软硬件密码产品，否则可能导致高风险项。 系列文章会分为三块，首先是这篇密评的基础介绍，其次是密评的各层面要求的指标，最后说明密评的量化评估规则。其中密评各层面的指标中会穿插高风险判定指引的的高风险项。 C3 密评相关概念 3.1 为什么要进行密评 《中华人民共和国密码法》第二十七条规定：法律、行政法规和国家有关规定要求使用商用密码进行保护的关键信息基础设施，其运营者应当使用商用密码进行保护，自行或者委托商用密码检测机构开展商用密码应用安全性评估。商用密码应用安全性评估应当与关键信息基础设施安全检测评估、网络安全等级测评制度相衔接，避免重复评估、测评。 简要的说，《密码法》、《网络安全法》、《网络安全等级保护条例》等法律强调了**等级保护三级及以上**信息系统、**关键信息基础设施**都要做密评。 3.2 密评通过的条件 密评通过需要满足GB/T 39786-2021《信息安全技术 信息系统密码应用基本要求》，同时根据《商用密码应用安全性评估量化评估规则》得分60以上，且无《信息系统密码应用高风险判定指引》中的高风险项即为通过。 60分以上，且无高风险项是通过密评的条件。 参考文件 GB/T 39786-2021《信息安全技术 信息系统密码应用基本要求》 信息系统密码应用高风险判定指引 商用密码应用安全性评估量化评估规则 3.3密评公司、密码厂商等 国家密码管理局维护的《商用密码应用安全性评估试点机构目录》中的机构才有实施密评的资质，共计48家。（https://www.oscca.gov.cn/sca/xwdt/2021-06/11/content_1060863.shtml） 经过认证，具备商密证书的产品可以在商用密码认证业务网上查询到。（http://service.scctc.org.cn） 3.4配合密评的人员 密评实施人员会在密评前期和现场询问关于系统各方面的情况： 1、机房物理情况，需要进入机房查验————机房管理人员 2、了解系统的物理服务器位置，管理方式，以及网络架构和采用的相关密码产品等————系统运维人员 3、系统采用的数据库，以及数据库的结构以及对应数据存储在哪张表单，以及数据存储的加密方式等————开发人员 4、关于密码设备和密钥管理相关的制度————甲方单位 结语 这篇文章定义了后续文章使用的术语和结构，同时阐述了为什么要进行密评和通过密评的条件，以及密评相关的基础知识等。后续会根据国家标准GB/T 39786-2021《信息安全技术 信息系统密码应用基本要求》讲述密评各层面的指标。 </description>
    </item>
    
    <item>
      <title>小区后门的鸭脖摊</title>
      <link>https://slientlamb.github.io/post/%E5%B0%8F%E5%8C%BA%E5%90%8E%E9%97%A8%E7%9A%84%E9%B8%AD%E8%84%96%E6%91%8A/</link>
      <pubDate>Thu, 16 Jun 2022 09:27:27 +0800</pubDate>
      
      <guid>https://slientlamb.github.io/post/%E5%B0%8F%E5%8C%BA%E5%90%8E%E9%97%A8%E7%9A%84%E9%B8%AD%E8%84%96%E6%91%8A/</guid>
      <description>hjuiwqo</description>
    </item>
    
    <item>
      <title>Q&amp;A SSRF基于白名单的绕过  URL中特殊字符的含义</title>
      <link>https://slientlamb.github.io/post/76264546/</link>
      <pubDate>Fri, 06 May 2022 03:46:39 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/76264546/</guid>
      <description>http://localhost%25%23@stock.weliketoshop.net/admin/delete?username=carlos %25%23为#双转UNICODE，问题在于为什么要@ 我的理解里#之后服务端不会处理
是个问题</description>
    </item>
    
    <item>
      <title>Q&amp;A   源码安装 —— GNU Make</title>
      <link>https://slientlamb.github.io/post/73401803/</link>
      <pubDate>Wed, 13 Apr 2022 13:54:25 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/73401803/</guid>
      <description>前言：其实之前就遇到过这个问题，但是当时没有解决并记录下来，现在找不到了，现在记录下来，希望之后能链接回来。
这次遇到的问题其实解决的很简单，此次记录主要是为了整理下从源码安装程序涉及的一些知识。
安装hydra的时候，遇到了如下问题：make: cc: No such file or directory
其实就是没有安装gcc编译器，解决思路是从这篇来的：makefile使用宏及用法$(宏标识符) $(cc)_换个角度说makefile 以下进入正题：
make命令安装详情 GNU Make是什么 GNU Make是一个控制从程序的源文件中生成程序的可执行文件和其他非源文件的工具。 Make可以从一个名为Makefile的文件中获得如何构建程序的知识，该文件列出了每个非源文件以及如何从其他文件计算它。当你编写一个程序时，你应该为它编写一个Makefile文件，这样就可以使用Make来编译和安装这个程序。
make工具能把各种头文件、源代码文件按规则编译、链接最后生成可执行程序。 ./configure（配置） make（编译） make install（安装） configure文件是一个可执行的脚本文件，它有很多选项，在待安装的源码目录下使用命令./configure –help可以输出详细的选项列表。其中&amp;ndash;prefix选项是配置安装目录，如果不配置该选项，安装后可执行文件默认放在/usr /local/bin，库文件默认放在/usr/local/lib，配置文件默认放在/usr/local/etc，其它的资源文件放在/usr /local/share，比较凌乱。如果配置了&amp;ndash;prefix，如：$ ./configure --prefix=/usr/local/test安装后的所有资源文件都会被放在/usr/local/test目录中，不会分散到其他目录。使用&amp;ndash;prefix选项的另一个好处是方便卸载软件或移植软件;当某个安装的软件不再需要时，只须简单的删除该安装目录，就可以把软件卸载得干干净净;而移植软件只需拷贝整个目录到另外一个机器即可(相同的操作系统下)。当然要卸载程序，也可以在原来的make目录下用一次make uninstall，但前提是Makefile文件有uninstall命令(nodejs的源码包里有uninstall命令，测试版本v0.10.35)。
如果没有配置&amp;ndash;prefix选项，源码包也没有提供make uninstall，则可以通过以下方式可以完整卸载：找一个临时目录重新安装一遍，如：$ ./configure --prefix=/tmp/to_remove &amp;amp;&amp;amp; make install然后遍历/tmp/to_remove的文件，删除对应安装位置的文件即可(因为/tmp/to_remove里的目录结构就是没有配置&amp;ndash;prefix选项时的目录结构)。当下载了源码就可以按照此种方法，就可以进行软件的安装和卸载。
./configure后会生成makefile ，这是make&amp;amp;make install的依赖
makefile 的一些知识 C：automake 以上 生成makefile的工具就是automake
参考文章：linux make命令安装详解 makefile使用宏及用法$(宏标识符) $(cc)_换个角度说makefile </description>
    </item>
    
    <item>
      <title>Q&amp;A  pip安装时遇到的问题     W13scan 安装</title>
      <link>https://slientlamb.github.io/post/70748382/</link>
      <pubDate>Wed, 30 Mar 2022 14:06:15 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/70748382/</guid>
      <description>Q:W13scan安装需要的依赖包 W13scan是基于python的被动扫描器，主要是看中开源的属性，可以自己修改。先罗列下需要的依赖包
ModuleNotFoundError: No module named &amp;lsquo;OpenSSL&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;cowpy&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;colorama&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;chardet&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;OpenSSL&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;socks&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;cowpy&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;pyjsparser&amp;rsquo; ModuleNotFoundError: No module named &amp;lsquo;six&amp;rsquo; ModuleNotFoundError: No module named &amp;rsquo;tld&#39; ModuleNotFoundError: No module named &amp;rsquo;lxml&#39;
以上是一些需要安装的依赖包，主要内容在于下面：遇到的一些问题
pip search 的替代方案 pip_search pip search XXX 是常规的查找相关包的命令，但是现在使用会出现如下问题：原因是因为pip search相关的服务器被不明攻击，导致官方无限期关闭了这项功能。
因此有了替代方案——pip_search包pip install pip_search使用方法：pip pip_search XXX</description>
    </item>
    
    <item>
      <title>Q&amp;A  Kunyu安装</title>
      <link>https://slientlamb.github.io/post/71062150/</link>
      <pubDate>Sat, 26 Mar 2022 09:47:28 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/71062150/</guid>
      <description>Q:安装Kunyu时报错 输入命令：git clone https://github.com/knownsec/Kunyu.git出现报错：fatal: unable to access &#39;[https://github.com/knownsec/Kunyu.git/&#39;:](https://github.com/knownsec/Kunyu.git/&#39;:) OpenSSL SSL_read: Connection was aborted, errno 10053
A:解决方案 网上搜索相关问题，找到：git config --global http.sslVerify false
问题解决。
在用pip安装库时报错：ValueError: check_hostname requires server_hostname
关掉VPN后问题解决，库成功安装！</description>
    </item>
    
    <item>
      <title>Q&amp;A  Linux环境变量  程序运行目录</title>
      <link>https://slientlamb.github.io/post/68619857/</link>
      <pubDate>Tue, 08 Mar 2022 07:10:59 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/68619857/</guid>
      <description>
Q:环境变量 Q：程序运行目录 A: C： </description>
    </item>
    
    <item>
      <title>Q&amp;A Linux服务器的上行和下行宽带</title>
      <link>https://slientlamb.github.io/post/65670586/</link>
      <pubDate>Tue, 25 Jan 2022 12:02:11 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/65670586/</guid>
      <description>speedtest-cli 网上查出speedtest-cli是一个用Python编写的轻量级Linux命令行工具，在Python2.4至3.4版本下均可运行。它基于Speedtest.net的基础架构来测量网络的上/下行速率。ubuntu@ip:~$ pip install speedtest-cli安装完成后提示： :::warning WARNING: The scripts speedtest and speedtest-cli are installed in &amp;lsquo;/home/ubuntu/.local/bin&amp;rsquo; which is not on PATH. Consider adding this directory to PATH or, if you prefer to suppress this warning, use &amp;ndash;no-warn-script-location. ::: 告警：speedtest 和 speedtest-cli 脚本安装在/home/ubuntu/.local/bin目录下，该目录不在PATH环境变量中。 考虑添加该目录至PATH环境变量中，或者你想禁止该告警，使用--no-warn-script-location
安装就完成了。
find命令 想探究一下这些脚本究竟安装到哪里了，其实根据Linux的文件目录以及/home/ubuntu/.local/bin就能知道了，但是想要记录一下 find 命令的使用。
find /home -name &amp;quot;*speed*&amp;quot; 指定在/home 目录下查找名字包含 speed 的文件
ubuntu@ip:~$ find /home -name &amp;#34;*speed*&amp;#34; /home/ubuntu/.local/lib/python3.8/site-packages/speedtest_cli.py /home/ubuntu/.local/lib/python3.8/site-packages/speedtest.py /home/ubuntu/.local/lib/python3.8/site-packages/__pycache__/speedtest_cli.cpython-38.pyc /home/ubuntu/.local/lib/python3.8/site-packages/__pycache__/speedtest.cpython-38.pyc /home/ubuntu/.local/lib/python3.8/site-packages/speedtest_cli-2.1.3.dist-info /home/ubuntu/.local/bin/speedtest-cli /home/ubuntu/.local/bin/speedtest 跳转到目录下即可执行命令。</description>
    </item>
    
    <item>
      <title>ClamAV    -Cheat Sheet</title>
      <link>https://slientlamb.github.io/post/64075400/</link>
      <pubDate>Tue, 04 Jan 2022 08:42:31 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/64075400/</guid>
      <description>磁盘扫描clamscan.exe --recursive C:\--move=DIRECTORY	Move infected files into DIRECTORY--remove[=yes/no(*)]	Remove infected files. Be careful!--log=FILE	-l FILE Save scan report to FILE
进程内存扫描clamscan --memory在&amp;ndash;kill和&amp;ndash;unload选项允许进行查杀/卸载感染加载的模块</description>
    </item>
    
    <item>
      <title>建站笔记01 Web代理  服务器服务管理   Linux文件系统</title>
      <link>https://slientlamb.github.io/post/61914580/</link>
      <pubDate>Sun, 05 Dec 2021 13:42:56 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/61914580/</guid>
      <description>安装WordPress需要的LNMP环境 service nginx start错误退出
systemctl status nginx.service查看状态nginx: [emerg] bind() to 0.0.0.0:80 failed (98: Address already in use)怀疑是80端口被占用
lsof -i:80COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEapache2 951 root 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 297082 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 297083 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 297084 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 297085 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 297086 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 303510 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)apache2 305315 www-data 4u IPv6 25687 0t0 TCP *:http (LISTEN)</description>
    </item>
    
    <item>
      <title>Q&amp;A WordPress无法安装插件</title>
      <link>https://slientlamb.github.io/post/55320166/</link>
      <pubDate>Fri, 15 Oct 2021 08:41:02 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/55320166/</guid>
      <description>Q：使用FTP升级插件总是提示目录错误 未能找到WordPress内容目录（wp-content） A： history | grep nginx 定位nginx目录
nginx目录下 /usr/share/nginx/html/wordpress是对应网页的目录位置，这也是之前配置好wp-config.php也没法通过WP管理界面进行插件更新的原因</description>
    </item>
    
    <item>
      <title>Burp Lab Note: Inconsistent handling of exceptional input</title>
      <link>https://slientlamb.github.io/post/65787212/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/65787212/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Q&amp;A Linux常用命令行</title>
      <link>https://slientlamb.github.io/post/56485651/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/56485651/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Q&amp;A 连接不上GitHub</title>
      <link>https://slientlamb.github.io/post/49156528/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/49156528/</guid>
      <description></description>
    </item>
    
    <item>
      <title>建站笔记02 FTP搭建 PAM模块</title>
      <link>https://slientlamb.github.io/post/62016072/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://slientlamb.github.io/post/62016072/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
